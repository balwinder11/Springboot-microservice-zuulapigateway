package com.springboot.graphql.geolocationapp.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.data.mongodb.core.geo.GeoJsonPoint;
import org.springframework.data.mongodb.core.geo.GeoJsonPolygon;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.graphql.geolocationapp.model.LocationEntry;
import com.springboot.graphql.geolocationapp.model.PolyLocation;
import com.springboot.graphql.geolocationapp.repo.LocationRepository;
import com.springboot.graphql.geolocationapp.service.LocationSerachService;

import graphql.GraphQL;
import graphql.schema.DataFetcher;
import graphql.schema.GraphQLSchema;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;

@RestController
public class PolyLocationResource {
	
	@Autowired
	private LocationSerachService locationService;
	
	@Value("classpath:model.graphqls")
	private Resource schemaResource;
	
	private GraphQL graphQl;
	
	@PostConstruct
	public void loadSchema()throws IOException{
		File schemaFile = schemaResource.getFile();
		TypeDefinitionRegistry registry = new SchemaParser().parse(schemaFile);
		RuntimeWiring wiring =  buildWiring();
		GraphQLSchema schema = new SchemaGenerator().makeExecutableSchema(registry,wiring);
		
	}
	
	
	
	private RuntimeWiring buildWiring() {
		// TODO Auto-generated method stub
		DataFetcher <List<PolyLocation>> fetcher1 = data ->{
			return (List<PolyLocation>) locationService.getAllLocation();
		};
		
		DataFetcher <List<PolyLocation>> fetcher2 = data ->{
			return locationService.findByQuards();
			//return (List<PolyLocation>)locationService.findByQuards();
		};
		return null;
	}
	@PostMapping("/addLocation")
	public void addLocations(@RequestBody PolyLocation location) {
		
		//List<PolyLocation> entities = new ArrayList<>();
		
		locationService.createLocation(location); 
		
	}

}
/* 

	private RuntimeWiring buildWiring() {
		DataFetcher<List<Person>> fetcher1 = data -> {
			return (List<Person>) repository.findAll();
		};

		DataFetcher<Person> fetcher2 = data -> {
			return repository.findByEmail(data.getArgument("email"));
		};

		return RuntimeWiring.newRuntimeWiring().type("Query",
				typeWriting -> typeWriting.dataFetcher("getAllPerson", fetcher1).dataFetcher("findPerson", fetcher2))
				.build();

	}

	@PostMapping("/addPerson")
	public String addPerson(@RequestBody List<Person> persons) {
		repository.save(persons);
		return "record inserted " + persons.size();
	}

	@GetMapping("/findAllPerson")
	public List<Person> getPersons() {
		return (List<Person>) repository.findAll();
	}

	@PostMapping("/getAll")
	public ResponseEntity<Object> getAll(@RequestBody String query) {
		ExecutionResult result = graphQL.execute(query);
		return new ResponseEntity<Object>(result, HttpStatus.OK);
	}

	@PostMapping("/getPersonByEmail")
	public ResponseEntity<Object> getPersonByEmail(@RequestBody String query) {
		ExecutionResult result = graphQL.execute(query);
		return new ResponseEntity<Object>(result, HttpStatus.OK);
	}co
 * 
 * 
 */
