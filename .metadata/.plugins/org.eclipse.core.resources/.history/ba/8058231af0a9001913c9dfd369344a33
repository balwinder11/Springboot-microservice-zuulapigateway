package com.springboot.graphql.geolocationapp.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.data.mongodb.core.geo.GeoJsonPoint;
import org.springframework.data.mongodb.core.geo.GeoJsonPolygon;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.graphql.geolocationapp.model.LocationEntry;
import com.springboot.graphql.geolocationapp.model.PolyLocation;
import com.springboot.graphql.geolocationapp.repo.LocationRepository;
import com.springboot.graphql.geolocationapp.service.LocationSerachService;

import graphql.ExecutionResult;
import graphql.GraphQL;
import graphql.schema.DataFetcher;
import graphql.schema.GraphQLSchema;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;

@RestController
public class PolyLocationResource {

	@Autowired
	private LocationSerachService locationService;

	@Value("classpath:model.graphqls")
	private Resource schemaResource;

	private GraphQL graphQl;

	@PostConstruct
	public void loadSchema() throws IOException {
		File schemaFile = schemaResource.getFile();
		TypeDefinitionRegistry registry = new SchemaParser().parse(schemaFile);
		RuntimeWiring wiring = buildWiring();
		GraphQLSchema schema = new SchemaGenerator().makeExecutableSchema(registry, wiring);

	}

	private RuntimeWiring buildWiring() {
		// TODO Auto-generated method stub
		DataFetcher<List<PolyLocation>> fetcher1 = data -> {
			return (List<PolyLocation>) locationService.getAllLocation();
		};

		DataFetcher<PolyLocation> fetcher2 = data -> {
			return (PolyLocation) locationService.findByQuards(data.getArgument("polyQuards"));
		};
		return RuntimeWiring.newRuntimeWiring().type("Query", typeWriting -> typeWriting
				.dataFetcher("getAllLocation", fetcher1).dataFetcher("findLocation", fetcher2)).build();
	}

	@PostMapping("/addLocation")
	public String addLocations(@RequestBody PolyLocation location) {

		// List<PolyLocation> entities = new ArrayList<>();

		locationService.createLocation(location);
         return "location inserted " + location.getId();
	}

	public List<PolyLocation> getAllLocations() {
		return locationService.getAllLocation();

	}

	public ResponseEntity<Object> getLocationByQuards(@RequestBody String query) {
		ExecutionResult result = graphQl.execute(query);
		return new ResponseEntity<Object>(result, HttpStatus.OK);
	}

}
/*
 * 
 * 
 * 
 * @PostMapping("/addPerson") public String addPerson(@RequestBody List<Person>
 * persons) { repository.save(persons); return "record inserted " +
 * persons.size(); }
 * 
 * @GetMapping("/findAllPerson") public List<Person> getPersons() { return
 * (List<Person>) repository.findAll(); }
 * 
 * @PostMapping("/getAll") public ResponseEntity<Object> getAll(@RequestBody
 * String query) { ExecutionResult result = graphQL.execute(query); return new
 * ResponseEntity<Object>(result, HttpStatus.OK); }
 * 
 * 
 * 
 */
